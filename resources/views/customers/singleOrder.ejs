<section class="status">
  <div class="container mx-auto">
    <div class="status-box w-full lg:w-2/3 mx-auto">
      <div class="flex items-center justify-between mb-12">
        <h1 class="text-xl font-bold">Track delivery status</h1>
        <h6 class="bg-white py-1 rounded-full px-4 text-green-600 text-xs">
          <%= order._id %>
        </h6>
        <input
          id="hiddenInput"
          type="hidden"
          value="<%= JSON.stringify(order) %>"
        />
      </div>
      <ul>
        <li
          class="status_line text-sm md:text-xl pb-16"
          data-status="order_placed"
        >
          <span>Order Placed</span>
        </li>
        <li
          class="status_line text-sm md:text-xl pb-16"
          data-status="confirmed"
        >
          <span>Order confirmation</span>
        </li>
        <li class="status_line text-sm md:text-xl pb-16" data-status="prepared">
          <span>Preparation</span>
        </li>
        <li
          class="status_line text-sm md:text-xl pb-16"
          data-status="delivered"
        >
          <span>Out for delivery </span>
        </li>
        <li class="status_line text-sm md:text-xl" data-status="completed">
          <span>Complete</span>
        </li>
      </ul>
    </div>
  </div>
</section>
<!-- 
<script>
  
  let statuses = document.querySelectorAll(".status_line");
  let hiddenInput = document.querySelector("#hiddenInput");
  let order = hiddenInput ? hiddenInput.value : null;
  order = JSON.parse(order);
  // let time = document.createElement("small");
  console.log(order);

  function updateStatus(order) {
    let stepCompleted = true;
    statuses.forEach((status) => {
      let dataProp = status.dataset.status;
      if (stepCompleted) {
        status.classList.add("step-completed");
      }
      if (dataProp === order.status) {
        stepCompleted = false;
        // time.innerText = moment(order.updatedAt).format("hh:mm A");
        // status.appendChild(time);
        if (status.nextElementSibling) {
          status.nextElementSibling.classList.add("current");
        }
      }
    });
  }

  updateStatus(order);

  // Socket
  let socket = io();

  // Join
  if (order) {
    socket.emit("join", `order_${order._id}`);
  }
  socket.on("orderUpdated", (data) => {
    const updatedOrder = { ...order };
    // updatedOrder.updatedAt = moment().format()
    updatedOrder.status = data.status;
    updateStatus(updatedOrder);
    // new Noty({
    //     type: 'success',
    //     timeout: 1000,
    //     text: 'Order updated',
    //     progressBar: false,
    // }).show();
  });
</script> -->
